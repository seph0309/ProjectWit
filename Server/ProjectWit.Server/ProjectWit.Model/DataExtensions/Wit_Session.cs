//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectWit.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    using System.Threading.Tasks;
    
    [MetadataType(typeof(WitSessionMetaData))]
    public partial class Wit_Session : WitDbContextBase<Wit_Session>, IWit_Session
    {
        public string ShowFullName { get; set; }
        public List<Wit_Session> GetSession(string userUID)
        {
            db.Configuration.LazyLoadingEnabled = true;
            List<AspNetRole> roles = db.AspNetRoles.Where(m => m.AspNetUsers.Any(user => user.Id == userUID)).ToList();

            foreach (AspNetRole role in roles)
            {
                if (role.IsPowerUser())
                {
                    return db.Wit_Session.ToList();
                }
                else if (role.IsCompanyAdmin())
                {
                    var comp = (from user in db.Wit_User
                                where user.User_UID == new Guid(userUID)
                                select new { CompanyUID = user.Company_UID }).FirstOrDefault();
                    if (comp.CompanyUID != null)
                    {
                        var returnVal = db.Wit_Session.SqlQuery(AspNetRole.GeAdminSessionQuery(comp.CompanyUID.ToString()));
                        return returnVal.ToList();
                    }
                }
            }
            //Return default (per user)
            return db.Wit_Session.Where(m => m.User_UID == new Guid(userUID)).ToList();
        }
        public async Task<List<Wit_Session>> GetAllAsync()
        {
            return await base.dbGetAllAsync();
        }
        public async Task<Wit_Session> GetByIdAsync(Guid? id)
        {
            db.Configuration.LazyLoadingEnabled = true;
            Wit_Session wit_Session = await db.Wit_Session.Where(m => m.Session_UID == id).FirstOrDefaultAsync();
            db.Configuration.LazyLoadingEnabled = false;
            return wit_Session;
        }
        public async Task<Wit_Session> FindByIdAsync(Guid? id)
        {
            db.Configuration.LazyLoadingEnabled = true;
            Wit_Session wit_Session = await base.dbFindByIdAsync(id);
            db.Configuration.LazyLoadingEnabled = false;
            return wit_Session;
        }

        public async Task<Wit_Session> CreateAsync(Wit_Session entity, string modifiedBy)
        {
            return await base.dbCreateAsync(entity,modifiedBy);
        }
        public async Task RemoveAsync(Guid? id)
        {
            await base.dbRemoveAsync(id);
        }
        public async Task UpdateAsync(Wit_Session entity, string modifiedBy)
        {
            await base.dbUpdateAsync(entity, modifiedBy);
        }
        public void Dispose()
        {
            GC.Collect();
            db.Dispose();
        }
    } 

    public class WitSessionMetaData
    {
        [Display(Name="Session ID")]
        public System.Guid Session_UID { get; set; }
        public System.Guid User_UID { get; set; }
        public string Browser { get; set; }
        [Display(Name = "Device")]
        public string DeviceType { get; set; }
        [Display(Name = "Last Active")]
        public Nullable<System.DateTime> ModifiedDate { get; set; }
        public string ModifiedBy { get; set; }
        public string IP { get; set; }
        public string Location { get; set; }
    
    }
}
