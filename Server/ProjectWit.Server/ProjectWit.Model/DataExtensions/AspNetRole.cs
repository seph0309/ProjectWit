//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectWit.Model
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using System.Linq;
    using System.Data.Entity;
    
    public partial class AspNetRole : WitDbContextBase<AspNetRole> , IAspNetRole
    {
        public bool IsSelected { get; set; }

        public const string SYSADMIN = "SYSADMIN";
        protected const string ADMIN = "ADMIN";
        protected const string CREW = "CREW";
        protected const string CUSTOMER = "CUSTOMER";
        protected const string GUEST = "GUEST";

        public async Task<AspNetRole> GetByIdAsync(Guid? id)
        {
            db.Configuration.LazyLoadingEnabled = true;
            return await db.AspNetRoles.Where(m => m.Id == id.ToString()).FirstOrDefaultAsync();
        }

        public async Task<AspNetRole> FindByIdAsync(Guid? id)
        {
            return await base.dbFindByIdAsync(id);
        }

        public async Task<List<AspNetRole>> GetAllAsync()
        {
            return await base.dbGetAllAsync();
        }

        public async Task<AspNetRole> CreateAsync(AspNetRole entity, string modifiedBy)
        {
            return await base.dbCreateAsync(entity, modifiedBy);
        }

        public async Task RemoveAsync(Guid? id)
        {
            await base.dbRemoveAsync(id);
        }

        public async Task UpdateAsync(AspNetRole entity, string modifiedBy)
        {
            await base.dbUpdateAsync(entity, modifiedBy);
        }
        public void Dispose()
        {
            GC.Collect();
            db.Dispose();
        }
        public List<AspNetRole> GetRoles(string UserID)
        {
            //Get Roles from user
            List<AspNetRole> aspNetRole = new List<AspNetRole>();

            //Get all Roles
            using (WitDbContext db = new WitDbContext())
            {
                db.Configuration.AutoDetectChangesEnabled = false;
                var allRoles = db.AspNetRoles.ToList();
                var identityUserRole = db.AspNetRoles.Where(m => m.AspNetUsers.Any(user => user.Id == UserID)).ToList();

                foreach (AspNetRole role in allRoles)
                {
                    var isSelected = from x in identityUserRole
                                     where x.Id == role.Id
                                     select x;

                    aspNetRole.Add(new AspNetRole
                    {
                        Id = role.Id.ToString(),
                        Name = role.Name.ToString(),
                        IsSelected = (isSelected.Count() > 0)
                    });
                }
            }
            return aspNetRole;
        }

        /// <summary>
        /// Creates a query which extracts session by Company and excludes SYSADMIN
        /// </summary>
        /// <param name="companyUID"></param>
        /// <returns></returns>
        public static string GeAdminSessionQuery(string companyUID)
        {
            string _sql = string.Format("SELECT DISTINCT Session_UID,Wit_Session.User_UID,Browser,DeviceType,IP, ");
            _sql = _sql + string.Format("Location,Wit_Session.ModifiedDate,Wit_Session.ModifiedBy,Wit_User.FirstName, Wit_User.LastName ");
            _sql = _sql + string.Format("FROM Wit_Session ");
            _sql = _sql + string.Format("INNER JOIN Wit_User ON Wit_Session.User_UID = Wit_User.User_UID ");
            _sql = _sql + string.Format("INNER JOIN Wit_Company ON Wit_User.Company_UID=Wit_Company.Company_UID ");
            _sql = _sql + string.Format("LEFT JOIN AspNetUserRoles ON Wit_User.User_UID= AspNetUserRoles.UserId ");
            _sql = _sql + string.Format("INNER JOIN AspNetRoles ON AspNetUserRoles.RoleId = AspNetRoles.Id ");
            _sql = _sql + string.Format("WHERE Wit_Session.User_UID IN ");
            _sql = _sql + string.Format("(SELECT User_UID FROM Wit_User WHERE Company_UID IN ('{0}')) ", companyUID);
            _sql = _sql + string.Format("AND AspNetRoles.Id <> '{0}'", SYSADMIN);
            return _sql;
        }

        public bool IsMobileUser()
        {
            if (Name == CREW || Name == ADMIN || Name == SYSADMIN)
                return true;
            else
                return false;
        }
        public bool IsPowerUser()
        {
            if (Name == SYSADMIN)
                return true;
            else
                return false;
        }
        public bool IsCompanyAdmin()
        {
            //If ADMIN, he has control of all users under the company
            if (Name == ADMIN)
                return true;
            else
                return false;
        }
        public bool IsCrew()
        {
            if (Name == CREW)
                return true;
            else
                return false;
        }
        public bool IsGuest()
        {
            if (Name == GUEST || Name == CUSTOMER)
                return true;
            else
                return false;
        }
 
    }
}
